
#Область СправкаПодсистемы

Функция Ф1() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция F1() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция Help() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция Помощь() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция Справка() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция Хэлп() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция Хелп() Экспорт
	Возврат ПолучитьОписаниеФункционала();
КонецФункции

Функция ПолучитьОписаниеФункционала()
	ОписаниеФункционала = Новый Структура;
	ОписаниеФункций 	= Новый Структура;
	
	// Описание функции Вижу.
	ОписаниеФункции = Новый Структура("Наименование,Описание,ПримерыИспользования");
	ОписаниеФункции.Наименование	= "Функция Вижу(Знач АнализируемыеДанные)";
	ОписаниеФункции.Описание		= "Выводит данные содержащиеся в менеджере временных таблиц или в запросе.";
	
	ПримерыИспользования = Новый Структура;
	ПримерыИспользования.Вставить("Пример1","Вижу(Запрос)");
	ПримерыИспользования.Вставить("Пример2","Вижу(МенеджерВременныхТаблиц)");
	ОписаниеФункции.ПримерыИспользования	= ПримерыИспользования;
	
	Описаниефункций.Вставить("Вижу",ОписаниеФункции);
	
	// Описание функции Присвоить.
	ОписаниеФункции = Новый Структура("Наименование,Описание,ПримерыИспользования");
	ОписаниеФункции.Наименование	= "Функция Присвоить(А, Знач Б)";
	ОписаниеФункции.Описание		= "Присваивает переменной А значение переменной В.";
	
	ПримерыИспользования = Новый Структура;
	ПримерыИспользования.Вставить("Пример1","Присвоить(Отказ,Ложь)");
	ОписаниеФункции.ПримерыИспользования	= ПримерыИспользования;
	
	Описаниефункций.Вставить("Присвоить",ОписаниеФункции);
	
	// Описание функции ВыполнитьКод.
	
	ОписаниеФункции = Новый Структура("Наименование,Описание,ПримерыИспользования");
	ОписаниеФункции.Наименование	= "ВыполнитьКод(ТекстКода, П1=Неопределено,  П2=Неопределено, П3=Неопределено, П4=Неопределено)";
	ОписаниеФункции.Описание		= "Выполняет любой код на языке 1С над любыми данными, переданными в функцию.";
	
	ПримерыИспользования = Новый Структура;
	ПримерыИспользования.Вставить("Пример1","ВыполнитьКод(""П1.Вставить(П2,П3)"",НаборРеквизитов,ИмяКлюча,ЗначениеКлюча) //Выводит сообщение"   );
	ПримерыИспользования.Вставить("Пример2","ВыполнитьКод(""П1.Вставить(П2,П3)"",НаборРеквизитов,ИмяКлюча,ЗначениеКлюча) // В структуру НаборРеквизитов вставляем значение с ключем ИмяКлюча, ЗначениеКлюча.");
	ОписаниеФункции.ПримерыИспользования	= ПримерыИспользования;
	
	Описаниефункций.Вставить("ВыполнитьКод",ОписаниеФункции);
	
	ОписаниеФункционала.Вставить("Функции",Описаниефункций);
	
	Возврат ОписаниеФункционала;
	
КонецФункции

#КонецОбласти

#Область ФункционалОтладки

// Функция - Выводит данные содержащиеся в менеджере временных таблиц или в запросе.
//
// Параметры:
//  Запрос	 - Запрос, МенеджерВременныхТаблиц	- 
// 
// Возвращаемое значение:
//   - 
//
Функция Вижу(Знач АнализируемыеДанные)  Экспорт
	
	Если ТипЗнч(АнализируемыеДанные) = Тип("Запрос") Тогда
		МенеджерВременныхТаблиц = АнализируемыеДанные.МенеджерВременныхТаблиц;
	ИначеЕсли ТипЗнч(АнализируемыеДанные) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = АнализируемыеДанные;
	КонецЕсли;
	
	#Если НЕ Клиент И НЕ Сервер И НЕ ВнешнееСоединение Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	#КонецЕсли

	ПредставлениеМВТ = НовыйПредставлениеМВТ(МенеджерВременныхТаблиц);
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("МенеджерВременныхТаблиц",ПредставлениеМВТ);
	
	Если Не ТипЗнч(АнализируемыеДанные) = Тип("Запрос") Тогда
		// Если это МВТ, то больше никаких данных из него получить не получится. Отдаем то что есть.
		Возврат СтруктураЗапроса;
	КонецЕсли;
	
	Запрос = АнализируемыеДанные;
	
	ЗапросПросмотра = Новый Запрос;
	
	Если ТипЗнч(МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		ЗапросПросмотра.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;

	// Устанавливаем значения параметров для запроса.
	Для Каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		ЗапросПросмотра.Параметры.Вставить(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;

	#Область МВТ
	Если ТипЗнч(МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		Если МенеджерВременныхТаблиц.Таблицы.Количество() > 0 Тогда
			// бегим по табицам МВТ.	
			// Сохраняем список таблиц МВТ
			// Создаем новые таблицы в МВТ путем Выбрать * Из ИмяМВТ Поместить Префикс_ИмяМВТ

			ПрефиксНовойТаблицы = "BackupCopyQueryTempTable_";
			ИменаВременныхТаблиц = Новый Массив;
			Для Каждого ТаблицаМенеджера Из МенеджерВременныхТаблиц.Таблицы Цикл 
				ИмяТаблицы = ТаблицаМенеджера.ПолноеИмя;
				ИменаВременныхТаблиц.Добавить(ИмяТаблицы);
				
				ЗапросПросмотра.Текст = ЗапросПросмотра.Текст + Символы.ПС + "
				| Выбрать *
				| Поместить " + ПрефиксНовойТаблицы + ИмяТаблицы + "
				| Из " + ИмяТаблицы + "		
				| ;"		 
				
			КонецЦикла;
			
			// Выполняем запрос, для сохранения значений таблиц.
			ЗапросПросмотра.Выполнить();
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

	ЗапросПросмотра.Текст = Запрос.Текст;
	
	Попытка
		// Выполняем запрос с получением результата для каждого запроса из пакета. 
		РезультатЗапроса = ЗапросПросмотра.ВыполнитьПакетСПромежуточнымиДанными();
	Исключение
		РезультатЗапроса = Неопределено;
	КонецПопытки;
	
	// Формируем 
	ТаблицаРезультатов = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Массив") Тогда 
		НомерТаблицы = 0;
		Для Каждого Таблица Из РезультатЗапроса Цикл 
			КлючТаблицы = "_" + Строка(НомерТаблицы);
			Если ТипЗнч(Таблица) = Тип("РезультатЗапроса") Тогда
				ТаблицаРезультатов.Вставить(КлючТаблицы,Таблица.Выгрузить());
			Иначе	
				ТаблицаРезультатов.Вставить(КлючТаблицы,Таблица);
			КонецЕсли;
			НомерТаблицы = НомерТаблицы + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем представление менеджера временных таблиц после выполнения запроса.
	ПредставлениеМВТПосле = НовыйПредставлениеМВТ(МенеджерВременныхТаблиц,ПрефиксНовойТаблицы);
	
	СтруктураЗапроса.Вставить("МенеджерВременныхТаблицПосле",ПредставлениеМВТПосле);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("Запрос",                       ЗапросПросмотра);
	//ДанныеЗапроса.Вставить("МенеджерВременныхТаблиц",      ПредставлениеМВТ);
	//ДанныеЗапроса.Вставить("МенеджерВременныхТаблицПосле", ПредставлениеМВТПосле);
	ДанныеЗапроса.Вставить("Результат",                    РезультатЗапроса);
	ДанныеЗапроса.Вставить("ТаблицаРезультатов",           ТаблицаРезультатов);
	СтруктураЗапроса.Вставить("Запрос",ДанныеЗапроса);
	
	#Область МВТ
	
	Если ТипЗнч(МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Количество() > 0 Тогда
			// бегим по табицам МВТ.	
			// Сохраняем список таблиц МВТ
			// Создаем новые таблицы в МВТ путем Выбрать * Из ИмяМВТ Поместить Префикс_ИмяМВТ
			
			//ИменаВременныхТаблиц = Новый Массив;
			
			ТекстУдалениеТаблиц = "";
			ТекстИнициализацииТаблиц = "";
			ТекстУдалениеТаблицБэкапов = "";
			
			Для Каждого ТаблицаМенеджера Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл 
				ИмяТаблицы = ТаблицаМенеджера.ПолноеИмя;
				
				Если СтрНайти(ИмяТаблицы,ПрефиксНовойТаблицы) > 0 Тогда
					
					// 
					ТекстИнициализацииТаблиц = ТекстИнициализацииТаблиц + Символы.ПС + "
					| Выбрать *
					| Поместить " + СтрЗаменить(ИмяТаблицы,ПрефиксНовойТаблицы,"") + "
					| Из " + ИмяТаблицы + "		
					| ;";
					
					// Уничтожим таблицу.
					ТекстУдалениеТаблицБэкапов = ТекстУдалениеТаблицБэкапов + "
					|УНИЧТОЖИТЬ " +  ИмяТаблицы + "
					|;";
					
				Иначе
					
					// Уничтожим таблицу.
					ТекстУдалениеТаблиц = ТекстУдалениеТаблиц + "
					|УНИЧТОЖИТЬ " +  ИмяТаблицы + "
					|;";

				КонецЕсли;
				
			КонецЦикла;
			
			// Удалем из МВТ все таблицы, кроме таблиц-бэкапов.
			
			// На основании таблиц-бэкапов создаем таблицы с оригинальными именами
			
			// Удаляем таблицы - бэкапы
			
			ЗапросПросмотра.Текст = 	ТекстУдалениеТаблиц + ТекстИнициализацииТаблиц + ТекстУдалениеТаблицБэкапов;
			
			// Выполняем запрос, для сохранения значений таблиц.
			ЗапросПросмотра.Выполнить();
			
			АнализируемыеДанные.МенеджерВременныхТаблиц = ЗапросПросмотра.МенеджерВременныхТаблиц;
			
			// Создаем новые Таблицы в МВТ путем Выбрать * Из Префикс_ИмяМВТ Поместить ИмяМВТ
		КонецЕсли;
	КонецЕсли;

	#КонецОбласти
	
	Если Ложь Тогда	
		// Сформируем новое представление МВТ, на основании таблиц до выполнения запроса.
		НовыйМВТ = НовыйМенеджерВременныхТаблицПоПредставлению(ПредставлениеМВТ);
		АнализируемыеДанные.МенеджерВременныхТаблиц = НовыйМВТ;
	КонецЕсли;
	
	Возврат СтруктураЗапроса;

КонецФункции

// Функция - Присваивает переменной А значение переменной В
//
// Параметры:
//  А	 - Любой тип - 
//  Б	 - Любой тип - 
// 
// Возвращаемое значение:
//  А - 
//
Функция Присвоить(А, Знач Б) Экспорт
	А=Б;
	Возврат А;
КонецФункции

// Функция - ВыполнитьКод позволяет в любой момент выполнить любой код на языке 1С над любыми данными, переданными ей. 
//
// Параметры:
//  Код	 - Строка - Код, на языке 1С для выполнения.
//  П	 - Любой тип - 
//  П1	 - Любой тип - 
//  П2	 - Любой тип - 
//  П3	 - Любой тип - 
//  П4	 - Любой тип - 
// 
// Возвращаемое значение:
//  Блево,Строка - В случае успешного выполнения исполняемого колда возвращает значение Истина, иначе возвращает описание ошибки.
//
// Примеры использования:
//	ВыполнитьКод("Сообщить(""Сумма:""+П1)", С); // Выводит сообщение 
//	ВыполнитьКод("П1.Вставить(П2,П3)",НаборРеквизитов,ИмяКлюча,ЗначениеКлюча);	// В структуру НаборРеквизитов вставляем значение с ключем ИмяКлюча, ЗначениеКлюча.
//
Функция ВыполнитьКод(ТекстКода, П1=Неопределено,  П2=Неопределено, П3=Неопределено, П4=Неопределено) Экспорт
	
	Попытка
		Выполнить(ТекстКода);
	Исключение
		Возврат ОписаниеОшибки()
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция Стоп() Экспорт
	
	//Попытка
		х = 5 / 0;
		
		Выполнить("х = 5/0");
	//Исключение	
	//
	//	ВызватьИсключение "Принудительная остановка отладки";
	//	
	//КонецПопытки;	
	
	Возврат х;
	
КонецФункции	

#КонецОбласти

# Область СлужебныеПроцедурыИФункции

// Функция - Формирует представление менеджера временных таблиц, используя стандартные методы платформы.
//
// Параметры:
//  МенеджерВТ	- Менеджер временных таблиц - менеджер временных таблиц, значения которого необходимо проанализировать.
//  Исключения 	- Строка - Имя таблицы (или часть имени). Для таблиц (служебные), которые не должны попадать в выборку.
//
// Возвращаемое значение:
//  Структура - различные свойства МВТ
//
Функция НовыйПредставлениеМВТ(Знач МенеджерВТ,Исключения = Неопределено)
		
	ОписаниеТаблицМВТ = Новый Структура;
	
	Если ТипЗнч(МенеджерВТ) = Тип("МенеджерВременныхТаблиц")Тогда
		
		// Считываем временные таблицы, находящиеся в менеджере.
		ТаблицыМенеджера = МенеджерВТ.Таблицы;
		
		// Выгружаем данные временных таблиц в таблицу значений.
		Для Каждого ТаблицаМенеджера Из ТаблицыМенеджера Цикл
			
			Если ЗначениеЗаполнено(Исключения) Тогда 
				Если СтрНайти(ТаблицаМенеджера.ПолноеИмя,Исключения) > 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеТаблицыМенеджера	= ТаблицаМенеджера.ПолучитьДанные().Выгрузить();
			ИмяТаблицыМенеджера		= ТаблицаМенеджера.ПолноеИмя + "_qty_" + Формат(ДанныеТаблицыМенеджера.Количество(),"ЧГ=");
			ОписаниеТаблицМВТ.Вставить(ИмяТаблицыМенеджера, ДанныеТаблицыМенеджера)
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураМВТ = Новый Структура;
	СтруктураМВТ.Вставить("Таблицы",ОписаниеТаблицМВТ);
	
	Возврат СтруктураМВТ;
	
КонецФункции	

Функция ИмяВременнойТаблицыИзПредставления(Знач ПредставлениеВТ, Знач КоличествоЭлементовВТ)
	
	ИмяВТ = ПредставлениеВТ;
	ИмяВТ = СтрЗаменить(ИмяВТ,"_qty_" + Строка(КоличествоЭлементовВТ),"");

	Возврат ИмяВТ;
	
КонецФункции	

Функция НовыйМенеджерВременныхТаблицПоПредставлению(Знач ПредставлениеМВТ)
	НовыйМВТ = Новый МенеджерВременныхТаблиц;
	НовыйЗапрос = Новый Запрос;
	НовыйЗапрос.МенеджерВременныхТаблиц = НовыйМВТ;
	Для Каждого ТаблицаЗапроса Из ПредставлениеМВТ.Таблицы Цикл  
		
		ИмяВТ = ИмяВременнойТаблицыИзПредставления(ТаблицаЗапроса.Ключ, ТаблицаЗапроса.Значение.Количество());
		
		НовыйЗапрос.Текст=НовыйЗапрос.Текст+" ВЫБРАТЬ ВТ_1.* ПОМЕСТИТЬ " + ИмяВТ + " Из &" + ТаблицаЗапроса.Ключ + " Как ВТ_1;"; // + ТаблицаЗапроса.Ключ + " Поместить " + ТаблицаЗапроса.Ключ + "; ";
		НовыйЗапрос.УстановитьПараметр(ТаблицаЗапроса.Ключ,ТаблицаЗапроса.Значение);
	КонецЦикла;
	
	НовыйЗапрос.Выполнить();
	
	Возврат НовыйМВТ;
	
КонецФункции	

Функция НовыйПредставлениеИмениВТ()

КонецФункции

#КонецОбласти

// Для вдохновления читать:
//http://kb.mista.ru/article.php?id=105
//https://infostart.ru/public/119661/

